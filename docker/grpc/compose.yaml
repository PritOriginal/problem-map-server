services:
  server:
    build:
      context: .
      dockerfile: ./docker/grpc/Dockerfile
      target: final
    container_name: server-grpc
    ports:
      - 44044:44044
    volumes:
      - ./log.txt:/bin/log.txt
    depends_on:
      migrate:
        condition: service_completed_successfully
  postgres:
    image: postgis/postgis
    container_name: postgres
    restart: always
    user: postgres
    expose:
      - 5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: problem_map
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  migrate:
    image: migrate/migrate
    container_name: migrate
    depends_on:
      postgres:
        condition: service_healthy
    
    volumes:
      - ./migrations:/migrations
    command: ["-path", "/migrations/", "-database", "postgres://postgres:postgres@postgres/problem_map?sslmode=disable", "up"]


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

